1.  Arrays are type safe and they dont throw ClassCastException
    Raw Collections -> like List l = new ArrayList() you can add anything and hence susceptible to CCE while retrieval
    
    Generics to the rescue - ArrayList<String>
                         (Base type)    (Parameter type) - no polymorphism, no primitives
                         
2. The left side of the declaration decides the type of the generic object. Usually.
		 a. List<String> nameList = new ArrayList<>();  
		 b. ArrayList list1 = new ArrayList<String>();  //Allowed
		    list1.add(10);                              //But you can add anything
		    list1.add("abc");
		    list1.add(5.5); 
   
   But in case of ? the type info can come from the right provided that it is concrete.
                         
3. <T> 			 - unbounded type
   <T extends X> - bounded type. X = class then T can be X or subtypes of X
   								 X = interface then T can be X or implementors of X
   				   always extends and never super or implements.
   				   Instead of T one can use ABC XYZ OR K,V OR P,Q,R,S etc.				 
   <T extends C & I1 & I2 & I3...> - multiple possible - 1 class, many interfaces
   
   In case of generic methods type info should come just before the return type
     public T void m1(T ob) {...}
   
4. Generic objects behave as per the area they are in ie enforcing type safety in generic area and like simple objects in non-generic area
   Type erasure - The ArrayList<String> will be converted to raw ArrayList post compilation. However the compiler will check for
                  issues after type info is stripped off.
   
5. For a method that has the arg
	(ArrayList<String> list)      - pass list of strings and add only strings within the method
	(ArrayList<?> list)           - pass list of any type but add only nulls within the method
	(ArrayList<? extends X> list) - pass list of anything that is X or its subtype OR an implementor of X - but add only nulls
	(ArrayList<? super X> list)   - if X is class - pass list of super type of X.
	                                if X is interface - someone which implements X takes its supertype and pass a list of it
	                                BUT only add nulls
    
     
      